/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import jooq.Keys;
import jooq.Profile;
import jooq.tables.records.ProfileChangeRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ProfileChange extends TableImpl<ProfileChangeRecord> {

    /**
     * The reference instance of <code>profile.profile_change</code>
     */
    public static final ProfileChange PROFILE_CHANGE = new ProfileChange();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>profile.profile_change.id</code>.
     */
    public final TableField<ProfileChangeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");
    /**
     * The column <code>profile.profile_change.parent_id</code>.
     */
    public final TableField<ProfileChangeRecord, String> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>profile.profile_change.master_profile</code>.
     */
    public final TableField<ProfileChangeRecord, String> MASTER_PROFILE = createField(DSL.name("master_profile"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>profile.profile_change.master_profile_version</code>.
     */
    public final TableField<ProfileChangeRecord, Long> MASTER_PROFILE_VERSION = createField(DSL.name("master_profile_version"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>profile.profile_change.deactivated_profile_merge</code>.
     */
    public final TableField<ProfileChangeRecord, String> DEACTIVATED_PROFILE_MERGE = createField(DSL.name("deactivated_profile_merge"), SQLDataType.VARCHAR, this, "");
    /**
     * The column
     * <code>profile.profile_change.deactivated_profile_merge_version</code>.
     */
    public final TableField<ProfileChangeRecord, Long> DEACTIVATED_PROFILE_MERGE_VERSION = createField(DSL.name("deactivated_profile_merge_version"), SQLDataType.BIGINT, this, "");
    /**
     * The column
     * <code>profile.profile_change.deactivated_profile_unmerge</code>.
     */
    public final TableField<ProfileChangeRecord, String> DEACTIVATED_PROFILE_UNMERGE = createField(DSL.name("deactivated_profile_unmerge"), SQLDataType.VARCHAR, this, "");
    /**
     * The column
     * <code>profile.profile_change.deactivated_profile_unmerge_version</code>.
     */
    public final TableField<ProfileChangeRecord, Long> DEACTIVATED_PROFILE_UNMERGE_VERSION = createField(DSL.name("deactivated_profile_unmerge_version"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>profile.profile_change.new_profile</code>.
     */
    public final TableField<ProfileChangeRecord, String> NEW_PROFILE = createField(DSL.name("new_profile"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>profile.profile_change.activated_profile</code>.
     */
    public final TableField<ProfileChangeRecord, String> ACTIVATED_PROFILE = createField(DSL.name("activated_profile"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>profile.profile_change.activated_profile_version</code>.
     */
    public final TableField<ProfileChangeRecord, Long> ACTIVATED_PROFILE_VERSION = createField(DSL.name("activated_profile_version"), SQLDataType.BIGINT, this, "");
    /**
     * The column <code>profile.profile_change.operation_type</code>.
     */
    public final TableField<ProfileChangeRecord, String> OPERATION_TYPE = createField(DSL.name("operation_type"), SQLDataType.VARCHAR, this, "");
    /**
     * The column <code>profile.profile_change.create_date</code>.
     */
    public final TableField<ProfileChangeRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("create_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private ProfileChange(Name alias, Table<ProfileChangeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProfileChange(Name alias, Table<ProfileChangeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>profile.profile_change</code> table reference
     */
    public ProfileChange(String alias) {
        this(DSL.name(alias), PROFILE_CHANGE);
    }

    /**
     * Create an aliased <code>profile.profile_change</code> table reference
     */
    public ProfileChange(Name alias) {
        this(alias, PROFILE_CHANGE);
    }

    /**
     * Create a <code>profile.profile_change</code> table reference
     */
    public ProfileChange() {
        this(DSL.name("profile_change"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProfileChangeRecord> getRecordType() {
        return ProfileChangeRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Profile.PROFILE;
    }

    @Override
    public Identity<ProfileChangeRecord, Long> getIdentity() {
        return (Identity<ProfileChangeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProfileChangeRecord> getPrimaryKey() {
        return Keys.PROFILE_CHANGE_PKEY;
    }

    @Override
    public ProfileChange as(String alias) {
        return new ProfileChange(DSL.name(alias), this);
    }

    @Override
    public ProfileChange as(Name alias) {
        return new ProfileChange(alias, this);
    }

    @Override
    public ProfileChange as(Table<?> alias) {
        return new ProfileChange(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfileChange rename(String name) {
        return new ProfileChange(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfileChange rename(Name name) {
        return new ProfileChange(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProfileChange rename(Table<?> name) {
        return new ProfileChange(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfileChange where(Condition condition) {
        return new ProfileChange(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfileChange where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfileChange where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfileChange where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProfileChange where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProfileChange where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProfileChange where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProfileChange where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfileChange whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProfileChange whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
